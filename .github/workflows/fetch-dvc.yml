name: Fetch bike and weather data to DVC

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  fetch:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: cache poetry install
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-1.8.2

      - uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: cache deps
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}

      - run: poetry install --no-interaction --no-root
        if: steps.cache-deps.outputs.cache-hit != 'true'

      - run: poetry install --no-interaction

      - run: poetry run fetch

      - name: Setup DVC
        uses: iterative/setup-dvc@v1

      - name: Pull data
        run: dvc pull

      - name: DVC push
        run: dvc push

      # - name: Setup AWS credentials
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   run: |
      #     DVC_REMOTE_URL=$(grep 'url =' .dvc/config | cut -d ' ' -f 3)
      #     DVC_ENDPOINT_URL=$(grep 'endpointurl =' .dvc/config | cut -d ' ' -f 3)
      #     echo "DVC_REMOTE_URL=$DVC_REMOTE_URL" >> $GITHUB_ENV
      #     echo "DVC_ENDPOINT_URL=$DVC_ENDPOINT_URL" >> $GITHUB_ENV

      # - name: Set DVC default remote
      #   run: poetry run dvc remote default origin

      # - name: DVC repro
      #   run: poetry run dvc repro

      # - name: DVC push
      #   run: poetry run dvc push
